version: '3.8'

services:
  hatch-os:
    build: .
    container_name: hatch-os
    restart: unless-stopped
    ports:
      - "3000:3000"
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - HATCH_HOME=/opt/hatch-os
      - HATCH_DATA=/var/lib/hatch-os
      - HATCH_LOGS=/var/log/hatch-os
      - ZYLON_CLOUD_URL=${ZYLON_CLOUD_URL:-https://api.zylonlabs.com}
      - ZYLON_API_KEY=${ZYLON_API_KEY:-demo_api_key}
      - PORT=3001
    volumes:
      - hatch_data:/var/lib/hatch-os
      - hatch_logs:/var/log/hatch-os
      - /tmp/.X11-unix:/tmp/.X11-unix:rw
    networks:
      - hatch-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Optional: Database service for production deployments
  hatch-db:
    image: sqlite:3
    container_name: hatch-database
    restart: unless-stopped
    volumes:
      - hatch_db:/var/lib/sqlite
    networks:
      - hatch-network
    profiles:
      - production

  # Optional: Reverse proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: hatch-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - hatch-os
    networks:
      - hatch-network
    profiles:
      - production

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: hatch-monitoring
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - hatch-network
    profiles:
      - monitoring

  # Optional: Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: hatch-dashboard
    restart: unless-stopped
    ports:
      - "3030:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=hatch123
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - hatch-network
    profiles:
      - monitoring

volumes:
  hatch_data:
    driver: local
  hatch_logs:
    driver: local
  hatch_db:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  hatch-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16