name: Hatch OS CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint --if-present
      
    - name: Run tests
      run: npm test --if-present
      
    - name: Run security audit
      run: npm audit --audit-level moderate
      
    - name: Build application
      run: npm run build --if-present

  build-system:
    name: Build System Package
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
      
    - name: Build React frontend
      run: npm run build --if-present
      
    - name: Build system package
      run: npm run build-system --if-present
      
    - name: Create installation package
      run: |
        mkdir -p dist
        tar -czf dist/hatch-os-${{ github.sha }}.tar.gz \
          --exclude='node_modules' \
          --exclude='.git' \
          --exclude='dist' \
          .
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: hatch-os-build-${{ github.sha }}
        path: dist/
        retention-days: 30

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: zylonlabs/hatch-os
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64,linux/arm/v7
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, build-system, security-scan]
    if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[release]')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: Get version from package.json
      id: version
      run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: hatch-os-build-${{ github.sha }}
        path: dist/
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.version }}
        release_name: Hatch OS v${{ steps.version.outputs.version }}
        body: |
          ## Hatch OS v${{ steps.version.outputs.version }}
          
          ### Features
          - ✅ Multi-factor authentication system
          - ✅ React-based desktop environment
          - ✅ Cloud synchronization (2-second intervals)  
          - ✅ Educational apps and distraction-free mode
          - ✅ System monitoring and security features
          - ✅ Admin panel for institution management
          - ✅ Raspberry Pi and x86 hardware support
          
          ### Installation
          ```bash
          wget https://github.com/Jagrit0711/hatchos/releases/download/v${{ steps.version.outputs.version }}/hatch-os-${{ github.sha }}.tar.gz
          tar -xzf hatch-os-${{ github.sha }}.tar.gz
          cd hatch-os
          sudo bash scripts/install-hatch-os.sh
          ```
          
          ### System Requirements
          - RAM: 1GB minimum (2GB+ recommended)
          - Storage: 8GB minimum (16GB+ recommended)
          - OS: Debian 11+ / Ubuntu 20.04+
          - Architecture: x86_64, ARM64, ARMv7
          
          ### Default Credentials
          - **Admin**: admin / admin123 / PIN: 123456
          - **Student**: student1 / student123 / PIN: 111111
          - **Teacher**: teacher1 / teacher123 / PIN: 222222
          
          ⚠️ **Change default credentials after installation!**
          
          Full changelog: https://github.com/Jagrit0711/hatchos/compare/v${{ steps.version.outputs.version }}
        draft: false
        prerelease: false
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/hatch-os-${{ github.sha }}.tar.gz
        asset_name: hatch-os-v${{ steps.version.outputs.version }}.tar.gz
        asset_content_type: application/gzip

  auto-update:
    name: Auto Update Check
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check for dependency updates
      run: |
        npx npm-check-updates -u
        if [ -n "$(git status --porcelain)" ]; then
          echo "Dependencies updated"
          echo "updated=true" >> $GITHUB_OUTPUT
        else
          echo "No updates available"
          echo "updated=false" >> $GITHUB_OUTPUT
        fi
      id: deps
      
    - name: Create Pull Request for updates
      if: steps.deps.outputs.updated == 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'chore: update dependencies'
        title: 'Auto-update dependencies'
        body: |
          ## Automated Dependency Update
          
          This PR was automatically created to update dependencies to their latest versions.
          
          ### Changes
          - Updated package.json with latest dependency versions
          - All updates are automatically tested by CI pipeline
          
          ### Review Checklist
          - [ ] Check for breaking changes in updated packages
          - [ ] Verify all tests pass
          - [ ] Test installation on clean system
          
          Auto-merge will be enabled if all checks pass.
        branch: auto-update-dependencies
        delete-branch: true